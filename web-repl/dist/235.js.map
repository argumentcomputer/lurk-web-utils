{"version":3,"file":"235.js","mappings":"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","sources":["webpack://lurk-web-repl/./pkg/index.js"],"sourcesContent":["import { startWorkers } from './snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js';\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().slice(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function main_js() {\n    wasm.main_js();\n}\n\n/**\n* @param {number} num_threads\n* @returns {Promise<any>}\n*/\nexport function initThreadPool(num_threads) {\n    const ret = wasm.initThreadPool(num_threads);\n    return takeObject(ret);\n}\n\n/**\n* @param {number} receiver\n*/\nexport function wbg_rayon_start_worker(receiver) {\n    wasm.wbg_rayon_start_worker(receiver);\n}\n\n/**\n*/\nexport class Repl {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Repl.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_repl_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.repl_new();\n        return Repl.__wrap(ret);\n    }\n    /**\n    * Run a lurk command\n    * @param {any} source\n    * @returns {any}\n    */\n    execute_lurk(source) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.repl_execute_lurk(retptr, this.ptr, addHeapObject(source));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class wbg_rayon_PoolBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(wbg_rayon_PoolBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_wbg_rayon_poolbuilder_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numThreads() {\n        const ret = wasm.wbg_rayon_poolbuilder_numThreads(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    receiver() {\n        const ret = wasm.wbg_rayon_poolbuilder_receiver(this.ptr);\n        return ret;\n    }\n    /**\n    */\n    build() {\n        wasm.wbg_rayon_poolbuilder_build(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_module = function() {\n        const ret = init.__wbindgen_wasm_module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_startWorkers_6fd3af285ea11136 = function(arg0, arg1, arg2) {\n        const ret = startWorkers(takeObject(arg0), takeObject(arg1), wbg_rayon_PoolBuilder.__wrap(arg2));\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n    imports.wbg.memory = maybe_memory || new WebAssembly.Memory({initial:18,maximum:16384,shared:true});\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module, maybe_memory) {\n    const imports = getImports();\n\n    initMemory(imports, maybe_memory);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input, maybe_memory) {\n    if (typeof input === 'undefined') {\n        input = new URL('index_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports, maybe_memory);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n"],"names":["wasm","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","Uint8Array","getUint8Memory0","buffer","memory","getStringFromWasm0","ptr","len","slice","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachedInt32Memory0","Int32Array","getInt32Memory0","takeObject","ret","dropObject","main_js","initThreadPool","num_threads","wbg_rayon_start_worker","receiver","Repl","static","Object","create","prototype","__destroy_into_raw","this","free","__wbg_repl_free","constructor","repl_new","__wrap","execute_lurk","source","retptr","__wbindgen_add_to_stack_pointer","repl_execute_lurk","r0","r1","wbg_rayon_PoolBuilder","__wbg_wbg_rayon_poolbuilder_free","numThreads","wbg_rayon_poolbuilder_numThreads","wbg_rayon_poolbuilder_receiver","build","wbg_rayon_poolbuilder_build","getImports","imports","wbg","__wbindgen_string_new","arg0","arg1","__wbindgen_string_get","ptr0","x","arg","malloc","realloc","buf","encode","subarray","set","mem","offset","code","charCodeAt","view","read","written","encodeString","passStringToWasm0","__wbindgen_malloc","__wbindgen_realloc","len0","__wbindgen_object_drop_ref","__wbindgen_throw","Error","__wbindgen_module","init","__wbindgen_wasm_module","__wbindgen_memory","__wbg_startWorkers_6fd3af285ea11136","arg2","initMemory","maybe_memory","WebAssembly","Memory","initial","maximum","shared","finalizeInit","instance","module","exports","__wbindgen_start","initSync","Module","Instance","async","input","URL","Request","fetch","Response","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","load"],"sourceRoot":""}